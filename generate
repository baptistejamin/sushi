#!/bin/bash

######################
#  Helper Functions  #
######################

help() {
    echo "Generate Cmake build directories for project"
    echo ""
    echo "Usage:"
    echo ""
	echo "$(basename $0) [options]"
	echo ""
    echo "Options:"
    echo ""
    echo "    -t : one of debug, release, all (default=all)"
    echo "    -b : build projects after launching CMake (default=false)"
    echo "    -o : base output directory (default=\$PROJECT_DIR/build)"
    echo "    --cmake-args : argument string to pass to CMake"
    echo "                   (use --cmake-args=\"-LH\" to list available options)"
}

######################
#  Global Variables  #
######################

TARGET_BUILD=all
GENERATE_DEBUG=true
GENERATE_RELEASE=true
BUILD_PROJECTS=false
CMAKE_EXTRA_ARGS=""
PROJECT_DIR_REL="`dirname \"$0\"`"
PROJECT_DIR=$PWD
BUILD_DIR=$PROJECT_DIR/build

######################
#  Argument parsing  #
######################

while getopts ":t:o:bh:-:" opt; do
    case $opt in
        t)
            TARGET_BUILD=$OPTARG
            ;;

        b)
            BUILD_PROJECTS=true
            ;;

        o)
            BUILD_DIR="$OPTARG"
            ;;

        -)
            case "${OPTARG}" in
                cmake-args=*)
                    CMAKE_EXTRA_ARGS=${OPTARG#*=}
                    ;;
                *)
                    echo "Invalid option: --$OPTARG" >&2
                    help
                    exit 1
                    ;;
            esac;;

        h)
            help
            exit 1
            ;;

        \?)
            echo "Invalid option: -$OPTARG" >&2
            help
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            help
            exit 1
            ;;
    esac
done

if [[ "$TARGET_BUILD" == "debug" ]]
then
    GENERATE_RELEASE=false
elif [[ "$TARGET_BUILD" == "release" ]]
then
    GENERATE_DEBUG=false
elif [[ "$TARGET_BUILD" != "all" ]]
then
    help
    exit 0
fi

#####################################
# Extra Optimization Compiler Flags #
#####################################
if [[ "$CROSS_COMPILE" == "" ]]
then
    TARGET_ARCH=$(uname --m)
    echo "Detected build for native machine (${TARGET_ARCH}), setting machine optimization flags accordingly..."
    if [[ $TARGET_ARCH == x86* ]]
    then
        X86_OPT_FLAGS="-mfpmath=sse -msse4.2"
        export CFLAGS="$CFLAGS $X86_OPT_FLAGS"
        export CXXFLAGS="$CXXFLAGS $X86_OPT_FLAGS"
    elif [[ $TARGET_ARCH == arm* ]]
    then
        ARM_OPT_FLAGS="-mfpu=neon -mfloat-abi=hard"
        export CFLAGS="$CFLAGS $ARM_OPT_FLAGS"
        export CXXFLAGS="$CXXFLAGS $ARM_OPT_FLAGS"
    fi
else
    echo "Detected cross compile build. Not setting any machine optimization flags..."
fi

######################
#  Script Processing #
######################

mkdir -p $BUILD_DIR
OLD_DIR=$PWD
cd $BUILD_DIR

if $GENERATE_RELEASE
then
    echo "Generating Release build directory:"
    mkdir -p $BUILD_DIR/release
    cd $BUILD_DIR/release
    cmake -DCMAKE_BUILD_TYPE=Release $CMAKE_EXTRA_ARGS $PROJECT_DIR
    if $BUILD_PROJECTS; then
        make
    fi
fi

if $GENERATE_DEBUG
then
    echo "Generating Debug build directory:"
    mkdir -p $BUILD_DIR/debug
    cd $BUILD_DIR/debug
    cmake -DCMAKE_BUILD_TYPE=Debug $CMAKE_EXTRA_ARGS $PROJECT_DIR
    if $BUILD_PROJECTS; then
        make
    fi
fi

cd $OLD_DIR

